/*
 * Copyright 2011 Robert W. Vawter III <bob@vawter.org>
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

import "common.stg"

// The main template for a model type's interface. Contains the Builder, too.
modelInterface(model, options, dialectProperties) ::= <<
package <options.packageName>;
<model.comment>
<generated(names)>
public interface <model.name>
    extends <names.JsonDdlObject>\<<model.name>\>
    <if(dialectProperties.implements)>, <dialectProperties.implements><endif> {
  <builder()>
  Builder builder();
  <model.properties:interfaceGetter(); separator="\n">
  Builder newInstance();
}
>>

interfaceGetter(property) ::= <<
<property.comment>
<property.type> <getterName(property)>();
>>

// The main template for a model type's implementation.
implementation(model, options, dialectProperties) ::= <<
package <options.packageName>;
<generated(names)>
class <model.name>Impl
    <if(dialectProperties.extends)>extends <dialectProperties.extends><endif>
    implements <names.Traversable>\<<model.name>\>, <names.Digested>, <model.name> {
  protected <model.name>Impl() {}
  public Class\<<model.name>\> getDdlObjectType() {
    return <model.name>.class;
  }
  public <model.name> accept(<names.JsonDdlVisitor> visitor) {
    return new <model.name>Context.Builder()
        .withValue(this)
        .withKind(<names.Kind>.DDL)
        .build().traverse(visitor);
  }
  public <model.name>.Builder builder() {
    return newInstance().from(this);
  }
  public <model.name>.Builder newInstance() {
    return new <model.name>.Builder();
  }
  public <names.Map>\<String, Object\> toJsonObject() {
    return <names.JsonMapVisitor>.toJsonObject(this);
  }
  public <model.name> traverse(<names.JsonDdlVisitor> visitor) {
    <model.properties:traversal(false, "this", "visitor"); separator="\n">
    return this;
  }
  <objectMethods(true)>
  <model.properties:implementationField(); separator="\n">
  <model.properties:implementationGetter(); separator="\n">
}
>>

// Emits the field declaration for a single property
implementationField(property) ::= "<property.type> <property.getterName>;"

implementationGetter(property) ::= <<
public <property.type> <getterName(property)>() {
  return <property.getterName>;
}
>>

// The main template for an enumerated value
enumType(model, options, dialectProperties) ::= <<
package <options.packageName>;
<model.comment>
<generated(names)>
public enum <model.name> {
  <model.enumValues:{value|<value.comment><value.name>}; separator=", ", wrap, anchor>;
}
>>

// The main template for a model object's Builder
builder() ::= <<
/**
 * Constructs instances of {@link <model.name>}. Instances of Builder should not be
 * reused after calling {@link #build()}.
 */
<generated(names)>
public static class Builder
    <if(dialectProperties.extends)>extends <dialectProperties.extends><endif>
    implements <names.Builder>\<<model.name>\>,  <names.Traversable>\<<model.name>\>, <names.Digested>, <model.name> {
  private <model.name>Impl obj;
  public Builder() {
    this(new <model.name>Impl());
  }
  Builder(<model.name>Impl instance) {
    this.obj = instance;
  }
  public <model.name>.Builder accept(<names.JsonDdlVisitor> visitor) {
    obj = new <model.name>Context.Builder()
        .withValue(this)
        .withKind(<names.Kind>.DDL)
        .withMutability(true)
        .build().traverse(visitor).builder().obj;
    return this;
  }
  public <model.name> build() {
    <model.name>Impl toReturn = obj;
    obj = null;
    <model.properties:maybeProtect("toReturn"); separator="\n">
    return toReturn;
  }
  public <model.name>.Builder builder() {
    return this;
  }
  public <model.name>.Builder from(<model.name> copyFrom) {
    <model.properties:{property|with<property.getterName>(copyFrom.<getterName(property)>());}; separator="\n">
    return this;
  }
  public <model.name>.Builder from(<names.Map>\<String, Object\> map) {
    accept(<names.JsonMapVisitor>.fromJsonMap(map));
    return this;
  }
  public Class\<<model.name>\> getDdlObjectType() {
    return <model.name>.class;
  }
  public <model.name>.Builder newInstance() {
    return new <model.name>.Builder();
  }
  public <names.Map>\<String, Object\> toJsonObject() {
    return obj.toJsonObject();
  }
  public <model.name>.Builder traverse(<names.JsonDdlVisitor> visitor) {
    <model.properties:traversal(true, "obj", "visitor"); separator="\n">
    return this;
  }
  <objectMethods(false)>
  <model.properties:builderAdd(); separator="\n">
  <model.properties:builderGetter(); separator="\n">
  <model.properties:builderSetter(); separator="\n">
  <model.properties:builderPut(); separator="\n">
  <model.properties:builderWith(); separator="\n">
}
>>

// Convenience accumulator methods for list properties
builderAdd(property) ::= <<
<if(property.type.isKindList)>
/**
 * Convenience method for adding members to the {@code <property.name>} property. If the
 * {@code <property.name>} property has not been previously set, it will be initialized with an
 * empty list. If the current value of {@code <property.name>} is immutable, it will be replaced
 * with a mutable list.
 */
public <model.name>.Builder add<property.getterName>(<property.type.listElement> element) {
  if (obj.<property.getterName> == null) {
    obj.<property.getterName> = new <names.ArrayList>\<<property.type.listElement>\>();
  }
  try {
    obj.<property.getterName>.add(element);
  } catch (<names.UnsupportedOperationException> e) {
    obj.<property.getterName> = new <names.ArrayList>\<<property.type.listElement>\>(obj.<property.getterName>);
    obj.<property.getterName>.add(element);
  }
  return this;
}
<endif>
>>

// Returns DDL objects as Builder instances, other types as-is
builderGetter(property) ::= <<
<if(property.type.isKindDDL)>
public <property.type>.Builder <getterName(property)>() {
  <property.type>.Builder toReturn = obj.<property.getterName>.builder();
  obj.<property.getterName> = toReturn;
  return toReturn;
}
<else>
public <property.type> <getterName(property)>() {
  return obj.<property.getterName>;
}
<endif>
>>

// A strict setFoo() method that allows the Builder to be treated as a bean-like object.
builderSetter(property) ::= <<
<property.comment>
public void set<property.getterName>(<property.type> value) {
  with<property.getterName>(value);
}
>>

// Convenience accumulator method for map properties
builderPut(property) ::= <<
<if(property.type.isKindMap)>
/**
 * Convenience method for adding members to the {@code <property.name>} property. If the
 * {@code <property.name>} property has not been previously set, it will be initialized with an
 * empty map. If the current value of {@code <property.name>} is immutable, it will be replaced
 * with a mutable map.
 */
public <model.name>.Builder put<property.getterName>(
    <property.type.mapKey> key, <property.type.mapValue> value) {
  if (obj.<property.getterName> == null) {
    obj.<property.getterName> = new <names.LinkedHashMap>\<<property.type.mapKey>, <property.type.mapValue>\>();
  }
  try {
    obj.<property.getterName>.put(key, value);
  } catch (<names.UnsupportedOperationException> e) {
    obj.<property.getterName> = new <names.LinkedHashMap>\<<property.type.mapKey>, <property.type.mapValue>\>(obj.<property.getterName>);
    obj.<property.getterName>.put(key, value);
  }
  return this;
}
<endif>
>>

// Constructs a Builder's withFoo() methods
builderWith(property) ::= <<
<property.comment>
public <model.name>.Builder with<property.getterName>(<property.type> value) {
  obj.<property.getterName> = value;
  return this;
}
>>

// Used by build() to call Protected.object() on potentially-mutable objects
maybeProtect(property, var) ::= <%
<if(property.type.shouldProtect)>
<var>.<property.getterName> = <names.Protected>.object(<var>.<property.getterName>);
<endif>
%>

// equals(), hashCode(), toString(), and computeDigest()
objectMethods(immutable) ::= <<
<if(immutable)>private byte[] digest;<endif>
public byte[] computeDigest() {
  <if(immutable)>if (digest == null) {
  <else>byte[] digest;
  <endif>
  <names.DigestVisitor> v = new <names.DigestVisitor>();
  accept(v);
  digest = v.getDigest();
  <if(immutable)>
  }
  <endif>
  return digest;
}

public int hashCode() {
  <if(!immutable)>byte[] digest = <endif>computeDigest();
  return (int)((digest[0] \<\< 3) | (digest[1] \<\< 2) | (digest[18] \<\< 1) | digest[19]);
}

public boolean equals(Object o) {
  if (o == this) {
    return true;
  }
  if (!(o instanceof <names.Digested>)) {
    return false;
  }
  byte[] d1 = computeDigest();
  byte[] d2 = ((<names.Digested>) o).computeDigest();
  for (int i = 0, j = d1.length; i\<j; i++) {
    if (d1[i] != d2[i]) {
      return false;
    }
  }
  return true;
}

/**
 * For debugging use only.
 */
public String toString() {
  return <names.JsonMapVisitor>.toString(this);
}
>>

/* 
 * Write a single property's traversal code. In the case of mutable properties
 * (e.g. Builders), a call to the relevant withFoo() method will be emitted.
 */ 
traversal(property, mutable, self, visitor) ::= <<
<if(mutable)>with<property.getterName>(<endif>
new <contextBuilderDeclaration(property.type)>()
  .withKind(<names.Kind>.<property.type.kind>)
  <if(property.type.nestedKinds)>
  .withNestedKinds(<names.Arrays>.asList(<property.type.nestedKinds:{kind|<names.Kind>.<kind>}; separator=", ", anchor, wrap>))
  <endif>
  .withLeafType(<leafType(property.type)>.class)
  <if(mutable)>
  .withMutability(<mutable>)
  <endif>
  .withProperty("<property.name>")
  .withValue(<self>.<property.getterName>)
  .build().traverse(<visitor>)<if(mutable)>)<endif>;
>>

/**
 * Convert a type to the ContextImpl subtype and necessary parameterization
 * @return ContextImplBlah.Builder<SomeType>
 */
contextBuilderDeclaration(type) ::= <%
<if(type.isKindList && type.listElement.isKindDdl)>
  <names.ListContext>
<elseif(type.isKindMap && type.mapValue.isKindDdl)>
  <names.MapContext>
<elseif(type.isKindDdl)>
  <type>Context
<else>
  <names.ValueContext>
<endif>
.Builder
<if(!type.isKindDdl)>
  \<
  <if(type.isKindList && type.listElement.isKindDdl)>
    <type.listElement>
  <elseif(type.isKindMap && type.mapValue.isKindDdl)>
    <type.mapValue>
  <else>
    <type>
  <endif>
  >
<endif>
%>

// Extract the leaf-most type from a compound type
leafType(type) ::= <%
<if(type.isKindList)>
  <leafType(type.listElement)>
<elseif(type.isKindMap)>
  <leafType(type.mapValue)>
<else><type>
<endif>
%>

// Build the package's convenience visitor base type
packageVisitor(options, schema) ::= <<
package <options.packageName>;
/**
 * A convenience base type that defines visitation methods for all model types in the
 * {@code <options.packageName>} package.
 */
<generated(names)>
public class <names.packageVisitor> implements <names.JsonDdlVisitor> {
  <schema.models.values:endVisit(); separator="\n">
  <schema.models.values:visit(); separator="\n">

  /**
   * This method controls the default behavior of the {@code endVisit()} methods.
   */
  protected \<T extends <names.JsonDdlObject>\<T\>\> void defaultEndVisit(T x, <names.Context>\<T\> ctx) {}

  /**
   * This method controls the default behavior of the {@code visit()} methods.
   * @return {@code true}
   */
  protected \<T extends <names.JsonDdlObject>\<T\>\> boolean defaultVisit(T x, <names.Context>\<T\> ctx) {
    return true;
  }
}
>>

endVisit(model) ::= <<
<if(!model.enumValues)>/**
 * Calls {@link #defaultEndVisit}.
 */
public void endVisit(<model.name> x, <names.Context>\<<model.name>\> ctx) throws Exception {
  defaultEndVisit(x, ctx);
}<endif>
>>

visit(model) ::= <<
<if(!model.enumValues)>/**
 * Calls {@link #defaultVisit}.
 */
public boolean visit(<model.name> x, <names.Context>\<<model.name>\> ctx) throws Exception {
  return defaultVisit(x, ctx);
}<endif>
>>

// The main template for a model type's interface. Contains the Builder, too.
modelContext(model, options, dialectProperties) ::= <<
package <options.packageName>;
class <model.name>Context extends <names.ObjectContext>\<<model.name>\> {
  static class Builder extends <names.ObjectContext>.Builder\<<model.name>\> {
    public Builder() {
      super(new <model.name>Context());
    }
  }
  
  @Override
  protected void tryEndVisit(<names.JsonDdlVisitor> visitor) throws Exception {
    if (visitor instanceof <names.packageVisitor>) {
      ((<names.packageVisitor>) visitor).visit(value, this);
    } else {
      super.tryEndVisit(visitor);
    }
  }
  
  @Override
  protected boolean tryVisit(<names.JsonDdlVisitor> visitor) throws Exception {
    if (visitor instanceof <names.packageVisitor>) {
      return ((<names.packageVisitor>) visitor).visit(value, this);
    }
    return super.tryVisit(visitor);
  }  
}
>>