/*
 * Copyright 2012 Robert W. Vawter III <bob@vawter.org>
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

import "common.stg"

modelObject(model, options, dialectProperties) ::= <<
<generated(names)>
<if(dialectProperties.closure)>
goog.provide('<packaged(model.name)>');
<model.referencedModels:{x|goog.require('<packaged(x.name)>');}; separator="\n">
<endif>

(function(){
  function mapObject(model, initializer) {
    var newValues = {};
    _.each(model, function(value, key) {
      newValues[key] = initializer(value);
    });
    return newValues;
  }
  <model.comment>
  <packaged(model.name)> = Backbone.Model.extend({
    <initialize()>,
    <model.properties:getter(); separator=",\n">,
    <model.properties:setter(); separator=",\n">
  });
}());
>>

initialize() ::= <<
initialize : function() {
  var value;
  <model.properties:initializeProperty(); separator="\n">
}
>>

initializeProperty(property) ::= <<
<if(property.type.isKindDdl || property.type.isKindList || property.type.isKindMap)>
value = this.get('<property.name>');
if (value) {
  this.set({'<property.name>' : <initializeExpression(property.type, "value")>});
}
<endif>
>>

initializeExpression(type, valueExpr) ::= <%
<if(type.isKindDdl)>
  new <packaged(type.name)>(<valueExpr>)
<elseif(type.isKindList)>
  new Backbone.Collection(
    _.map(<valueExpr>, function(x){
      return <initializeExpression(type.listElement, "x")>;
    }),
    {
      model : <packaged(type.listElement.name)>
    }
  )
<elseif(type.isKindMap)>
  new Backbone.Model(mapObject(
    <valueExpr>,
    function(x) {
      return <initializeExpression(type.mapValue, "x")>;
    }
  ))
<else>
  <valueExpr>
<endif>
%>

getter(property) ::= <<
<property.comment>
<getterName(property)> : function() {
  return this.get('<property.name>');
}
>>

setter(property) ::= <<
<property.comment>
set<property.getterName> : function(x) {
  this.set({'<property.name>' : x});
}
>>

enumType(model, options, dialectProperties) ::= <<
<generated(names)>
<if(dialectProperties.closure)>
goog.provide('<packaged(model.name)>');
<endif>

(function(){
  <model.comment>
  <options.packageName>.<model.name> = {
    <model.enumValues:enumValue(); separator=",\n">
  };
}());
>>

enumValue(enumValue) ::= <<
<enumValue.comment>
'<enumValue.name>' : '<enumValue.name>'
>>